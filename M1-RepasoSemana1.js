// 游눝 REPASO SEMANA 1 DEL M칍DULO 1 游눝

// EJERCICIO 1 - CLOSURES
// Crear un Stack mediante un Closure
//   El Stack debe permitir:
//     Agregar elementos: add
//     Remover elementos: remove
//     Retornar longitud del stack: size

function stack() {
  // Tu c칩digo aqu칤:
}
// Resultados esperados al invocar la funci칩n:
console.log("----- Closures -----");
var myStack = stack();
myStack.add(5);
console.log(myStack.size()); // 1 (devuelve longitud de miStack)
myStack.add(7);
myStack.add(9);
console.log(myStack.size()); // 3 (devuelve longitud de miStack)
console.log(myStack.remove()); // 9 (devuelve el elemento removido)
console.log(myStack.size()); // 2 (devuelve longitud de miStack)

// EJERCICIO 2 - RESOLVER EN FORMA RECURSIVA!!!
// La funci칩n sumArray recibe un array de n칰meros enteros como argumento
// Devuelve una suma de todos los elementos del array seg칰n lo siguiente:
//   Si el n칰mero del array es par suma 0
//   Si el n칰mero del array es impar suma 1
// Ejemplos:
//   [ 2, 4 ] --> Retorna 0, ya que ambos n칰meros son pares (0 + 0 = 0)
//   [ 1, 4 ] --> Retorna 1, ya que solamente hay un n칰mero impar (1 + 0 = 1)
//   [ 1, 3, 5 ] --> Retorna 3, ya que hay tres n칰meros impares (1 + 1 + 1 = 3)

function sumArray(arr) {
  // Tu c칩digo aqu칤:
}
// Resultados esperados al invocar la funci칩n:
console.log("----- Recursi칩n -----");
console.log(sumArray([0])); // 0
console.log(sumArray([0, 2, 4, 6])); // 0
console.log(sumArray([0, 1, 2, 3])); // 2
console.log(sumArray([0, 1, 2, 3, 5, 7])); // 4
console.log(sumArray([1, 3, 5, 7, 9, 11])); // 6

// EJERCICIO 3 - LINKEDLIST
// Crear la clase (o funci칩n constructora) LinkedList,
//   la cual genere una lista simplemente enlazada.
// Posee los siguientes constructores:
//   LinkedList
//   Node
// Y los siguientes m칠todos:
// 游녤add: agrega nodo al final de la lista
// 游녤insertAt: agrega nodo en la posici칩n pasada como argumento
//             myList.insertAt(0) -> inserta en head
// 游녤removeFrom: remueve nodo en la posici칩n pasada como argumento y devuelve su valor
//               myList.removeFrom: remueve head de la lista
// 游녤removeElement: remueve nodo con el valor pasado como argumento y devuelve su valor; y null si no existe.
//                  myList.removeElement(7): remueve el nodo cuyo valor es 7 (si existe)
// 游녤isEmpty: retorna true si la lista est치 vac칤a, false si no lo est치
// 游녤getSize: retorna la longitud de la lista
// 游녤print: imprime en consola todos los elementos de la lista

function LinkedList() {
  // Tu c칩digo aqu칤:
}

LinkedList.prototype.add = function () {
  // Tu c칩digo aqu칤:
};

// Resultados esperados:
console.log("----- LinkedList -----");
var myList = new LinkedList();
console.log(myList); // LinkedList { size: 0, head: null }
myList.add(7);
console.log(myList); // LinkedList { size: 1, head: Node { value: 7, next: null } }
